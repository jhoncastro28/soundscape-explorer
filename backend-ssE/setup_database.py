"""
Script para configurar la base de datos con datos de prueba
"""

import os
import sys
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
from pymongo import MongoClient, GEOSPHERE

# Cargar variables de entorno
load_dotenv()

MONGODB_URI = os.getenv('MONGODB_URI')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'soundscape')

# Datos de muestra para Colombia
SAMPLE_SOUNDS = [
    {
        "nombre": "Amanecer en la selva amaz√≥nica",
        "descripcion": "Sonidos matutinos de la selva con cantos de p√°jaros y el r√≠o al fondo",
        "autor": "Carlos Natura",
        "ubicacion": {"type": "Point", "coordinates": [-69.2167, -4.2158]},
        "sonidos": ["naturaleza", "p√°jaros", "agua", "bosque"],
        "emociones": ["relajante", "peaceful", "inspirador"],
        "etiquetas": ["biodiversidad", "naturaleza", "meditaci√≥n"],
        "audio_url": "/uploads/example_amazon_dawn.mp3",
        "duracion": 180,
        "calidad_audio": "alta"
    },
    {
        "nombre": "Lluvia en Bogot√°",
        "descripcion": "Lluvia suave cayendo en el centro de Bogot√° durante la tarde",
        "autor": "Mar√≠a Rodr√≠guez",
        "ubicacion": {"type": "Point", "coordinates": [-74.0721, 4.7110]},
        "sonidos": ["lluvia", "ciudad"],
        "emociones": ["melanc√≥lico", "nost√°lgico", "relajante"],
        "etiquetas": ["clima", "ciudad", "relajaci√≥n"],
        "audio_url": "/uploads/example_bogota_rain.mp3",
        "duracion": 240,
        "calidad_audio": "media"
    },
    {
        "nombre": "Olas del Caribe en Cartagena",
        "descripcion": "Sonido relajante de las olas rompiendo en las playas de Cartagena",
        "autor": "Jos√© Marinero",
        "ubicacion": {"type": "Point", "coordinates": [-75.5518, 10.3997]},
        "sonidos": ["oc√©ano", "agua", "naturaleza"],
        "emociones": ["relajante", "peaceful", "rom√°ntico"],
        "etiquetas": ["playa", "turismo", "relajaci√≥n", "bienestar"],
        "audio_url": "/uploads/example_cartagena_waves.mp3",
        "duracion": 300,
        "calidad_audio": "alta"
    },
    {
        "nombre": "Caf√© matutino en Zona Rosa",
        "descripcion": "Ambiente de una cafeter√≠a en la Zona Rosa de Bogot√° durante la ma√±ana",
        "autor": "Ana Cafetera",
        "ubicacion": {"type": "Point", "coordinates": [-74.0525, 4.6694]},
        "sonidos": ["ciudad", "multitud", "m√∫sica"],
        "emociones": ["energ√©tico", "inspirador", "alegre"],
        "etiquetas": ["trabajo", "caf√©", "social", "productividad"],
        "audio_url": "/uploads/example_cafe_morning.mp3",
        "duracion": 420,
        "calidad_audio": "media"
    },
    {
        "nombre": "Viento en los p√°ramos de Chingaza",
        "descripcion": "Viento suave atravesando la vegetaci√≥n del p√°ramo en el Parque Chingaza",
        "autor": "Miguel Monta√±ero",
        "ubicacion": {"type": "Point", "coordinates": [-73.8000, 4.5167]},
        "sonidos": ["viento", "naturaleza"],
        "emociones": ["misterioso", "meditativo", "peaceful"],
        "etiquetas": ["p√°ramo", "naturaleza", "meditaci√≥n", "biodiversidad"],
        "audio_url": "/uploads/example_chingaza_wind.mp3",
        "duracion": 360,
        "calidad_audio": "alta"
    },
    {
        "nombre": "TransMilenio en hora pico",
        "descripcion": "Sonidos del sistema de transporte masivo durante la hora pico",
        "autor": "Roberto Urbano",
        "ubicacion": {"type": "Point", "coordinates": [-74.0500, 4.6500]},
        "sonidos": ["tr√°fico", "ciudad", "industrial"],
        "emociones": ["ca√≥tico", "energ√©tico"],
        "etiquetas": ["transporte", "ciudad", "estr√©s"],
        "audio_url": "/uploads/example_transmilenio_rush.mp3",
        "duracion": 180,
        "calidad_audio": "media"
    },
    {
        "nombre": "Cascada La Chorrera",
        "descripcion": "El sonido poderoso de la cascada m√°s alta de Colombia",
        "autor": "Diana Aventurera",
        "ubicacion": {"type": "Point", "coordinates": [-74.1167, 4.5833]},
        "sonidos": ["agua", "naturaleza"],
        "emociones": ["inspirador", "energ√©tico", "aventurero"],
        "etiquetas": ["cascada", "turismo", "naturaleza", "aventura"],
        "audio_url": "/uploads/example_la_chorrera.mp3",
        "duracion": 480,
        "calidad_audio": "profesional"
    },
    {
        "nombre": "Vallenato en Valledupar",
        "descripcion": "M√∫sica vallenata tradicional en una casa de Valledupar",
        "autor": "Rafael Juglares",
        "ubicacion": {"type": "Point", "coordinates": [-73.2481, 10.4631]},
        "sonidos": ["m√∫sica"],
        "emociones": ["alegre", "nost√°lgico", "rom√°ntico"],
        "etiquetas": ["m√∫sica", "cultura", "tradici√≥n"],
        "audio_url": "/uploads/example_vallenato.mp3",
        "duracion": 320,
        "calidad_audio": "alta"
    }
]

def connect_to_database():
    """Conectar a MongoDB"""
    try:
        client = MongoClient(MONGODB_URI)
        db = client[DATABASE_NAME]
        
        # Verificar conexi√≥n
        client.admin.command('ping')
        print("‚úÖ Conectado a MongoDB Atlas")
        return db
    except Exception as e:
        print(f"‚ùå Error conectando a MongoDB: {e}")
        sys.exit(1)

def setup_collections_and_indexes(db):
    """Configurar colecciones e √≠ndices"""
    try:
        print("üìä Configurando colecciones e √≠ndices...")
        
        # Colecci√≥n de sonidos
        sounds_collection = db.sonidos
        
        # Crear √≠ndices necesarios
        indices = [
            ([("ubicacion", GEOSPHERE)], "√çndice geoespacial"),
            ("fecha", "√çndice de fecha"),
            ("emociones", "√çndice de emociones"),
            ("etiquetas", "√çndice de etiquetas"), 
            ("autor", "√çndice de autor"),
            ("sonidos", "√çndice de tipos de sonidos")
        ]
        
        for index_spec, description in indices:
            try:
                sounds_collection.create_index(index_spec)
                print(f"   ‚úÖ {description}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {description}: {e}")
        
        return sounds_collection
        
    except Exception as e:
        print(f"‚ùå Error configurando √≠ndices: {e}")
        return None

def insert_sample_data(collection):
    """Insertar datos de muestra"""
    try:
        print("üìù Insertando datos de muestra...")
        
        # Limpiar datos existentes (opcional)
        existing_count = collection.count_documents({})
        if existing_count > 0:
            print(f"   üóëÔ∏è Encontrados {existing_count} documentos existentes")
            choice = input("   ¬øDeseas limpiar los datos existentes? (s/N): ")
            if choice.lower() in ['s', 's√≠', 'si']:
                collection.delete_many({})
                print("   ‚úÖ Datos existentes eliminados")
        
        # Insertar sonidos de muestra
        for i, sound in enumerate(SAMPLE_SOUNDS):
            # A√±adir fecha aleatoria en los √∫ltimos 30 d√≠as
            sound["fecha"] = datetime.now() - timedelta(days=random.randint(0, 30))
            collection.insert_one(sound.copy())
            print(f"   üìù Insertado: {sound['nombre']}")
        
        print(f"‚úÖ Insertados {len(SAMPLE_SOUNDS)} sonidos de muestra")
        
        # Mostrar estad√≠sticas
        total_sounds = collection.count_documents({})
        unique_authors = len(collection.distinct("autor"))
        unique_emotions = len(collection.distinct("emociones"))
        
        print(f"\nüìä Estad√≠sticas de la base de datos:")
        print(f"   ‚Ä¢ Total de sonidos: {total_sounds}")
        print(f"   ‚Ä¢ Autores √∫nicos: {unique_authors}")
        print(f"   ‚Ä¢ Emociones √∫nicas: {unique_emotions}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error insertando datos: {e}")
        return False

def test_queries(collection):
    """Probar consultas b√°sicas"""
    try:
        print("\nüîç Probando consultas...")
        
        # Consulta b√°sica
        total = collection.count_documents({})
        print(f"   üìä Total de documentos: {total}")
        
        # Consulta por emoci√≥n
        relajantes = collection.count_documents({"emociones": "relajante"})
        print(f"   üòå Sonidos relajantes: {relajantes}")
        
        # Consulta geoespacial (cerca de Bogot√°)
        bogota_sounds = collection.count_documents({
            "ubicacion": {
                "$near": {
                    "$geometry": {
                        "type": "Point",
                        "coordinates": [-74.0721, 4.7110]
                    },
                    "$maxDistance": 50000  # 50km
                }
            }
        })
        print(f"   üèôÔ∏è Sonidos cerca de Bogot√°: {bogota_sounds}")
        
        # Consulta de agregaci√≥n (emociones m√°s populares)
        pipeline = [
            {"$unwind": "$emociones"},
            {"$group": {"_id": "$emociones", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}},
            {"$limit": 3}
        ]
        
        top_emotions = list(collection.aggregate(pipeline))
        print("   üé≠ Top 3 emociones:")
        for emotion in top_emotions:
            print(f"      ‚Ä¢ {emotion['_id']}: {emotion['count']} sonidos")
        
        print("‚úÖ Todas las consultas funcionan correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando consultas: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üéµ SoundScape Explorer - Configuraci√≥n de Base de Datos")
    print("=" * 55)
    
    # Conectar a la base de datos
    db = connect_to_database()
    
    # Configurar colecciones e √≠ndices
    collection = setup_collections_and_indexes(db)
    if not collection:
        return
    
    # Insertar datos de muestra
    success = insert_sample_data(collection)
    if not success:
        return
    
    # Probar consultas
    test_success = test_queries(collection)
    if not test_success:
        return
    
    print("\nüéâ ¬°Base de datos configurada exitosamente!")
    print("üìù Pr√≥ximos pasos:")
    print("   1. Iniciar el backend: python app.py")
    print("   2. Instalar dependencias del frontend: cd frontend-sse && npm install")
    print("   3. Iniciar el frontend: npm start")
    print("   4. Abrir http://localhost:3000 en tu navegador")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Operaci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)