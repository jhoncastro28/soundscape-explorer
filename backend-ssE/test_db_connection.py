"""
Script para probar la conexi√≥n a MongoDB Atlas
"""

import os
import sys
from dotenv import load_dotenv
from pymongo import MongoClient

def test_mongodb_connection():
    """Probar conexi√≥n a MongoDB Atlas"""
    
    # Cargar variables de entorno
    load_dotenv()
    
    MONGODB_URI = os.getenv('MONGODB_URI')
    DATABASE_NAME = os.getenv('DATABASE_NAME', 'soundscape')
    
    if not MONGODB_URI:
        print("‚ùå ERROR: MONGODB_URI no est√° configurada en el archivo .env")
        return False
    
    print("üîß Configuraci√≥n encontrada:")
    print(f"   ‚Ä¢ Base de datos: {DATABASE_NAME}")
    print(f"   ‚Ä¢ URI: {MONGODB_URI[:50]}...")
    
    try:
        print("\nüîó Intentando conectar a MongoDB Atlas...")
        
        # Crear cliente MongoDB
        client = MongoClient(MONGODB_URI)
        
        # Probar conexi√≥n
        client.admin.command('ping')
        print("‚úÖ Conexi√≥n exitosa a MongoDB Atlas")
        
        # Obtener informaci√≥n de la base de datos
        db = client[DATABASE_NAME]
        collections = db.list_collection_names()
        
        print(f"\nüìä Informaci√≥n de la base de datos '{DATABASE_NAME}':")
        print(f"   ‚Ä¢ Colecciones existentes: {len(collections)}")
        
        if collections:
            print(f"   ‚Ä¢ Nombres: {', '.join(collections)}")
            
            # Si existe la colecci√≥n de sonidos, mostrar estad√≠sticas
            if 'sonidos' in collections:
                sounds_count = db.sonidos.count_documents({})
                print(f"   ‚Ä¢ Total de sonidos: {sounds_count}")
        else:
            print("   ‚Ä¢ La base de datos est√° vac√≠a (esto es normal para una instalaci√≥n nueva)")
        
        # Probar operaci√≥n geoespacial b√°sica
        print("\nüó∫Ô∏è Probando operaciones geoespaciales...")
        test_collection = db.test_geo
        
        # Insertar un documento de prueba
        test_doc = {
            "name": "test_point",
            "location": {
                "type": "Point",
                "coordinates": [-74.0721, 4.7110]  # Bogot√°
            }
        }
        
        # Crear √≠ndice geoespacial
        test_collection.create_index([("location", "2dsphere")])
        
        # Insertar y buscar
        result = test_collection.insert_one(test_doc)
        
        # Buscar puntos cerca de Bogot√°
        near_query = {
            "location": {
                "$near": {
                    "$geometry": {
                        "type": "Point",
                        "coordinates": [-74.0721, 4.7110]
                    },
                    "$maxDistance": 1000  # 1km
                }
            }
        }
        
        found = test_collection.find_one(near_query)
        
        if found:
            print("‚úÖ Operaciones geoespaciales funcionando correctamente")
        else:
            print("‚ö†Ô∏è Problema con operaciones geoespaciales")
        
        # Limpiar datos de prueba
        test_collection.drop()
        
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        print("üìù Tu configuraci√≥n de MongoDB Atlas est√° lista para usar")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error de conexi√≥n: {e}")
        print("\nüîß Posibles soluciones:")
        print("   1. Verifica que la URI de MongoDB Atlas sea correcta")
        print("   2. Aseg√∫rate de que tu IP est√© en la whitelist de MongoDB Atlas")
        print("   3. Verifica tus credenciales de MongoDB Atlas")
        print("   4. Comprueba tu conexi√≥n a internet")
        
        return False

if __name__ == "__main__":
    print("üéµ SoundScape Explorer - Test de Conexi√≥n MongoDB")
    print("=" * 50)
    
    # Cambiar al directorio del backend
    script_dir = os.path.dirname(os.path.abspath(__file__))
    backend_dir = os.path.join(script_dir, 'backend-ssE')
    
    if os.path.exists(backend_dir):
        os.chdir(backend_dir)
        print(f"üìÇ Cambiando al directorio: {backend_dir}")
    else:
        print("‚ö†Ô∏è Ejecutando desde el directorio actual")
    
    success = test_mongodb_connection()
    
    if success:
        print("\n‚úÖ ¬°Listo para continuar con la instalaci√≥n!")
        sys.exit(0)
    else:
        print("\n‚ùå Resuelve los problemas de conexi√≥n antes de continuar")
        sys.exit(1)